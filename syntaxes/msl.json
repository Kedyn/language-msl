{
    "uuid": "be41aef0-b40b-426f-b680-c670edfb6263",
    "name": "mIRC",
    "scopeName": "source.mrc",
    "fileTypes": ["mrc"],
    "patterns": [
        {"include": "#comments"},
        {"include": "#function-definitions"},
        {"include": "#variable-assignments"},
        {"include": "#statements"},
        {"include": "#labels"},
        {"include": "#keywords"},
        {"include": "#commands"},
        {"include": "#identifiers"},
        {"include": "#variables"},
        {"include": "#constants"},
        {"include": "#punctuation"}
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.block.mrc",
                    "begin": "(?:^|(?<=\\s))(/\\*)",
                    "beginCaptures": {
                        "1": {"name": "punctuation.definition.comment.slash-star.mrc"}
                    },
                    "end": "(\\*/)",
                    "endCaptures": {
                        "1": {"name": "punctuation.definition.comment.star-slash.mrc"}
                    }
                },
                {
                    "name": "comment.line.mrc",
                    "match": "(?:^|(?<=\\s));.*",
                    "captures": {
                        "1": {"name": "punctuation.definition.comment.semicolon.mrc"}
                    }
                }
            ]
        },
        "function-definitions": {
            "patterns": [
                {
                    "match": "^(?i)^(alias)\\s+(?:-l\\s+)?(\\w+)\\s+(?={)",
                    "captures": {
                        "1": {"name": "storage.type.alias.mrc"},
                        "2": {"name": "entity.name.function.mrc"}
                    }
                },
                {
                    "begin": "(?i)^(dialog)\\s+(?:-l\\s+)?(\\w+)\\s+({)",
                    "beginCaptures": {
                        "1": {"name": "storage.type.dialog.mrc"},
                        "2": {"name": "entity.name.section.dialog.mrc"},
                        "3": {"name": "punctuation.bracket.curly.begin.mrc"}
                    },
                    "end": "(})",
                    "endCaptures": {
                        "1": {"name": "punctuation.bracket.curly.end.mrc"}
                    },
                    "patterns": [
                        {"include": "#comments"},
                        {
                            "match": "(?i)^\\s*(title|icon|size|option|text|edit|button|check|radio|box|scroll|list|combo|link|tab|menu|item)\\s+",
                            "captures": {
                                "1": {"name": "entity.name.tag.mrc"}
                            }
                        },
                        {"include": "#strings"},
                        {"include": "#identifiers"},
                        {"include": "#variables"},
                        {"include": "#constants"},
                        {
                            "name": "punctuation.separator.delimiter.mrc",
                            "match": ","
                        }
                    ]
                },
                {
                    "match": "(?i)^(menu)\\s+(channel|menubar|nicklist|query|status|@\\w+)(,(channel|menubar|nicklist|query|status|@\\w+))*\\s+(?={)",
                    "captures": {
                        "1": {"name": "storage.type.menu.mrc"}
                    }
                },
                {
                    "name": "entity.name.class.mrc",
                    "match": "(?i)^(raw)\\s+.+:.+:"
                },
                {
                    "name": "entity.name.class.mrc",
                    "match": "(?i)^(on)\\s+.+:(ACTION|ACTIVE|AGENT|APPACTIVE|BAN|CHAT|CLOSE|CONNECT(?:FAIL)?|CTCPREPLY|DCCSERVER|DE(HELP|OP|VOICE)|DIALOG|DISCONNECT|DNS|ERROR|EXIT|FILERCVD|FILESENT|GETFAIL|HELP|HOTLINK|INPUT|INVITE|JOIN|KEY(DOWN|UP)|KICK|LOAD|LOGON|MIDIEND|MODE|MP3END|NICK|NOSOUND|NOTICE|NOTIFY|OP|OPEN|PARSELINE|PART|PING|PLAYEND|PONG|QUIT|RAWMODE|SENDFAIL|SERV(?:ERMODE|EROP)?|SIGNAL|SNOTICE|SOCK(CLOSE|LISTEN|OPEN|READ|WRITE)|START|TABCOMP|TEXT|TOPIC|UDPREAD|UN(BAN|LOAD|NOTIFY)|USERMODE|WALLOPS|WAVEEND|VCMD|VOICE):(.+:)*"
                }
            ]
        },
        "variable-assignments": {
            "patterns": [
                {
                    "match": "(?i)(?:(?:^|(?<=[|{)]|else)\\s)\\s*((/*)!?var(\\s-g)?)?|(,)\\s+)\\s*((%)\\w+)(?:\\s+(=)\\s+)?",
                    "captures": {
                        "1": {"name": "storage.type.mrc"},
                        "2": {"name": "punctuation.definition.command.mrc"},
                        "3": {"name": "punctuation.separator.delimiter.mrc"},
                        "4": {"name": "variable.other.normal.mrc"},
                        "5": {"name": "variable.global.set.mrc"},
                        "6": {"name": "meta.punctuation.definition.variable.other.normal.mrc"},
                        "7": {"name": "keyword.operator.assignment.mrc"}
                    }
                },
                {
                    "match": "(?i)(?:^|(?<=[|{)]|else)\\s)\\s*((/*)set)(?:\\s+\\-[a-z]+)?\\s+((%)\\w+)\\s",
                    "captures": {
                        "1": {"name": "storage.type.mrc"},
                        "2": {"name": "punctuation.definition.command.mrc"},
                        "3": {"name": "variable.other.normal.mrc"},
                        "4": {"name": "meta.punctuation.definition.variable.other.normal.mrc"}
                    }
                }
            ]
        },
        "statements": {
            "patterns": [
                {
                    "name": "meta.conditional.statement.mrc",
                    "begin": "(?ix:(?:^|(?<=[{}]\\s))\\s*(if|while)\\s+(\\() | (?:^|(?<=}\\s))\\s*(elseif)\\s+(\\())",
                    "beginCaptures": {
                        "1": {"name": "keyword.control.conditional.mrc"},
                        "2": {"name": "punctuation.bracket.round.begin.mrc"},
                        "3": {"name": "keyword.control.conditional.mrc"},
                        "4": {"name": "punctuation.bracket.round.begin.mrc"}
                    },
                    "end": "(\\))",
                    "endCaptures": {
                        "1": {"name": "punctuation.bracket.round.end.mrc"}
                    },
                    "patterns": [
                        {"include": "#statements-content"},
                        {"include": "#statements-recurse"}
                    ]
                },
                {
                    "match": "(?i)(?:^|(?<=}\\s))\\s*(else)(?=\\s)",
                    "captures": {
                        "1": {"name": "keyword.control.conditional.mrc"}
                    }
                }
            ]
        },
        "statements-recurse": {
            "patterns": [
                {
                    "begin": "(\\()",
                    "beginCaptures": {
                        "1": {"name": "punctuation.bracket.round.begin.mrc"}
                    },
                    "end": "(\\))",
                    "endCaptures": {
                        "1": {"name": "punctuation.bracket.round.end.mrc"}
                    },
                    "patterns": [
                        {"include": "#statements-content"},
                        {"include": "#statements-recurse"}
                    ]
                }
            ]
        },
        "statements-content": {
            "patterns": [
                {"include": "#comments"},
                {"include": "#identifiers"},
                {"include": "#variables"},
                {"include": "#constants"},
                {"include": "#comparison-operators"}
            ]
        },
        "comparison-operators": {
            "patterns": [
                {
                    "name": "keyword.operator.comparison.mrc",
                    "match": "===?|[!<>]=|<|>|//|\\\\|is(?:in(?:cs)?|wm(?:cs)?|num|letter|alnum|alpha|lower|upper|on|op|hop|voice|reg|chan|ban|invite|except|aop|avoice|ignore|protect|notify)"
                },
                {
                    "name": "keyword.operator.logical.mrc",
                    "match": "!|&&?|\\|\\|"
                }
            ]
        },
        "arithmetic-operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.mrc",
                    "match": "[+\\-/*^%]"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "match": "(?:^|(?<=[|{)]|else)\\s)\\s*(/*!?(?i:break|continue|goto|halt(?:def)?|return))\\b",
                    "captures": {
                        "1": {"name": "keyword.control.flow.mrc"}
                    }
                }
            ]
        },
        "commands": {
            "patterns": [
                {
                    "comment": "built-in commands (-timer/var/set)",
                    "match": "(?:^|(?<=[|{)]|else)\\s)\\s*((/*)(?:(!)(\\.)?|(\\.)(!)?)?!?(?i:abook|ajinvite|alias|aline|ame|amsg|anick|aop|auser|autojoin|away|avoice|background|ban|bcopy|beep|bindip|bread|breplace|bset|btrunc|bunset|bwrite|channel|clear(?:all)?|cline|clipboard|close|cnick|color|com(?:close|list|open|reg)|copy|creq|ctcreply|ctcps|dcc|ddcserver|dde|ddeserver|debug|dec|describe|dialog|did|didtok|disable|disconnect|dlevel|dline|dll|dns|dqwindow|draw(?:copy|dot|fill|line|pic|rect|replace|rot|save|size|scroll|text)|ebeeps|echo|editbox|emailaddr|enable|events|exit|fclose|filter|findtext|firewall|flash|flist|flood|flush|flushini|font|fopen|fseek|fsend|fserve|fullname|fwrite|ghide|gload|gmove|gopts|gplay|gpoint|gqreq|groups|gshow|gsize|gstop|gtalk|gunload|guser|hadd|hdec|hdel|help|hfree|hinc|hload|hmake|hop|hsave|ial(?:clear|mark)?|identd|ignore|iline|inc|invite|iuser|join|kick|linesep|links|list|load(?:buf)?|localinfo|log|logview|mdi|me|menubar|mkdir|mnick|mode|msg|nick|noop|notice|notify|omsg|onotice|part|partall|pdcc|perform|play|playctrl|pop|protect|proxy|pvoice|qme|qmsg|query|queryrn|quit|raw|reload|remini|remote|remove|rename|renwin|reseterror|resetidle|rlevel|rline|rmdir|run|ruser|save(?:buf|ini)?|say|scid|scon|server|showmirc|signal|sline|sock(?:accept|close|list|listen|mark|open|pause|read|rename|udp|write)|sound|speak|splay|sreq|strip|switchbar|timestamp|tip|tips|titlebar|tnick|tokenize|toolbar|topic|tray|treebar|ulist|unload|unset|unsetall|updatenl|url|uwho|vc(?:add|md|rem)|whois|window|winhelp|vol|write|writeini))(?=\\s)",
                    "captures": {
                        "1": {"name": "support.function.command.default.mrc"},
                        "2": {"name": "punctuation.definition.command.mrc"},
                        "3": {"name": "meta.keyword.operator.command.default.mrc"},
                        "4": {"name": "meta.keyword.operator.command.silent.mrc"},
                        "5": {"name": "meta.keyword.operator.command.silent.mrc"},
                        "6": {"name": "meta.keyword.operator.command.default.mrc"}
                    }
                },
                {
                    "comment": "/timer",
                    "match": "(?:^|(?<=[|{)]|else)\\s)\\s*((/*)(?:(!)(\\.)?|(\\.)(!)?)?(?i:timer))(\\w+)?(?=\\s)",
                    "captures": {
                        "1": {"name": "support.function.command.default.mrc"},
                        "2": {"name": "punctuation.definition.command.mrc"},
                        "3": {"name": "meta.keyword.operator.command.default.mrc"},
                        "4": {"name": "meta.keyword.operator.command.silent.mrc"},
                        "5": {"name": "meta.keyword.operator.command.silent.mrc"},
                        "6": {"name": "meta.keyword.operator.command.default.mrc"}
                    }
                },
                {
                    "comment": "custom aliases (that are preceeded by /)",
                    "match": "(?:^|(?<=[|{)]|else)\\s)\\s*((/+)(\\.)?\\w+)(?=\\s)",
                    "captures": {
                        "1": {"name": "entity.name.function.command.custom.mrc"},
                        "2": {"name": "punctuation.definition.command.mrc"},
                        "3": {"name": "meta.keyword.operator.command.silent.mrc"}
                    }
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "comment": "$null $true $false $pi $crlf ...",
                    "name": "constant.language.mrc",
                    "match": "(\\$~?)(!)?(?i:true|false|null|pi|crlf|cr|lf)\\b",
                    "captures": {
                        "1": {"name": "meta.punctuation.definition.identifier.mrc"},
                        "2": {"name": "meta.keyword.operator.identifier.default.mrc"}
                    }
                },
                {
                    "comment": "$$?= $?*= $?!= $?",
                    "name": "keyword.operator.input-prompt.mrc",
                    "match": "(\\$)(\\$)?~?\\?(?:[*!]?(?==))?",
                    "captures": {
                        "1": {"name": "meta.punctuation.definition.identifier.mrc"},
                        "2": {"name": "meta.punctuation.definition.identifier.mrc"}
                    }
                },
                {
                    "comment": "$$0 $1- $2-3 $?4",
                    "name": "support.type.parameter.mrc",
                    "match": "(\\$)(\\$)?~?(?:\\d+(?:-\\d+|-)?|\\?\\d+)(?!\\w)",
                    "captures": {
                        "1": {"name": "meta.punctuation.definition.identifier.mrc"},
                        "2": {"name": "meta.punctuation.definition.identifier.mrc"}
                    }
                },
                {
                    "comment": "$ifmatch $v1 $v2 $!",
                    "name": "support.type.prev-result.mrc",
                    "match": "(\\$~?)(?:!|!?(?i:ifmatch|v[12]))\\b",
                    "captures": {
                        "1": {"name": "meta.punctuation.definition.identifier.mrc"}
                    }
                },
                {
                    "comment": "$() $+()",
                    "begin": "((\\$~?)\\+?)(\\()",
                    "beginCaptures": {
                        "1": {"name": "support.function.identifier.default.mrc"},
                        "2": {"name": "meta.punctuation.definition.identifier.mrc"},
                        "3": {"name": "punctuation.bracket.round.begin.mrc"}
                    },
                    "end": "(\\))",
                    "endCaptures": {
                        "1": {"name": "punctuation.bracket.round.end.mrc"}
                    },
                    "patterns": [
                        {"include": "#identifiers-content"},
                        {"include": "#identifiers-recurse"}
                    ]
                },
                {
                    "comment": "$+ $&",
                    "name": "keyword.operator.string.mrc",
                    "match": "(\\$~?)[&+]\\B",
                    "captures": {
                        "1": {"name": "meta.punctuation.definition.identifier.mrc"}
                    }
                },
                {
                    "begin": "((\\$~?)(!)?iif)(\\()",
                    "beginCaptures": {
                        "1": {"name": "support.function.identifier.default.mrc"},
                        "2": {"name": "meta.punctuation.definition.identifier.mrc"},
                        "3": {"name": "meta.keyword.operator.identifier.default.mrc"},
                        "4": {"name": "punctuation.bracket.round.begin.mrc"}
                    },
                    "end": "(\\))((\\.)\\w+)?",
                    "endCaptures": {
                        "1": {"name": "punctuation.bracket.round.end.mrc"},
                        "2": {"name": "support.function.identifier.default.property.mrc"},
                        "3": {"name": "meta.punctuation.definition.identifier.property.mrc"}
                    },
                    "patterns": [
                        {"include": "#identifiers-iif-content"},
                        {"include": "#identifiers-iif-recurse"}
                    ]
                },
                {
                    "begin": "((\\$~?)(!)?calc)(\\()",
                    "beginCaptures": {
                        "1": {"name": "support.function.identifier.default.mrc"},
                        "2": {"name": "meta.punctuation.definition.identifier.mrc"},
                        "3": {"name": "meta.keyword.operator.identifier.default.mrc"},
                        "4": {"name": "punctuation.bracket.round.begin.mrc"}
                    },
                    "end": "(\\))((\\.)\\w+)?",
                    "endCaptures": {
                        "1": {"name": "punctuation.bracket.round.end.mrc"},
                        "2": {"name": "support.function.identifier.default.property.mrc"},
                        "3": {"name": "meta.punctuation.definition.identifier.property.mrc"}
                    },
                    "patterns": [
                        {"include": "#identifiers-calc-content"},
                        {"include": "#identifiers-calc-recurse"}
                    ]
                },
                {
                    "comment": "$and() $file() $regex() $window() ...",
                    "begin": "((\\$~?)(!)?(?i:abook|abs|acos|address|addtok|agent|alias|and|ansi2mirc|aop|asc|asctime|asin|atan2?|avoice|base|bfind|bindip|bitoff|biton|bvar|bytes|cb|ceil|chan|chat|chr|click|cnick|color|com(?:call|chan|val)?|compress|cosh?|count|countcs|crc|ctime|dccignore|dde|decode|decompress|deltok|dialog|did(?:reg|tok|wm)?|disk|dll|dllcall|dns|duration|editbox|encode|eval|exists|fgetc|file|find(?:dir|file|tok)|fline|floor|fopen|fread|fserve|get(?:dot|tok)?|group|hash|height|hfind|hget|highlight|hypot|ial|ialchan|ibl|iel|ignore|iil|inellipse|ini|inpoly|input|inrect|inroundrect|instok|int|intersect|iptype|isalias|isbit|isdde|isdir|isfile|islower|istok|istokcs|isupper|left|len|level|line|lines|link|lock|log|log10|longfn|longip|lower|mask|matchtok|matchtokcs|md5|mid|mk(?:fn|logfn|nickfn)|mode|msfile|nick|nofile|nopath|noqt|not|notags|notify|numtok|onpoly|or|ord|pic|play|portfree|pos|poscs|protect|puttok|qt|query|rand|read|readini|reg(?:ex|ml|mlex|sub|subex)|remove|removecs|remtok|remtokcs|replacex?|replacex?cs|reptok|reptokcs|rgb|right|round|scid|scon|script|sdir|send|server|sfile|sha1|shortfn|sin|sline|snick|sock|sorttok|sorttokcs|sound|speak|sqrt|str|strip|style|submenu|tanh?|timer|tip|toolbar|trust|ulist|upper|uptime|var|vcmd|width|wildtok|wildtokcs|window|vol|wrap|xor))(\\()",
                    "beginCaptures": {
                        "1": {"name": "support.function.identifier.default.mrc"},
                        "2": {"name": "meta.punctuation.definition.identifier.mrc"},
                        "3": {"name": "meta.keyword.operator.identifier.default.mrc"},
                        "4": {"name": "punctuation.bracket.round.begin.mrc"}
                    },
                    "end": "(\\))((\\.)\\w+)?",
                    "endCaptures": {
                        "1": {"name": "punctuation.bracket.round.end.mrc"},
                        "2": {"name": "support.function.identifier.default.property.mrc"},
                        "3": {"name": "meta.punctuation.definition.identifier.property.mrc"}
                    },
                    "patterns": [
                        {"include": "#identifiers-content"},
                        {"include": "#identifiers-recurse"}
                    ]
                },
                {
                    "comment": "$active $me $server $window ...",
                    "name": "support.type.identifier.default.noargs.mrc",
                    "match": "(\\$~?)(!)?(?i:active(?:cid|wid)?|address|agent(?:name|stat|ver)|anick|aop|appactive|appstate|away(?:msg|time)?|avoice|banmask|bnick|cb|cd|chan(?:modes|types)?|cid|clevel|cmdbox|cmdline|comerr|compact|creq|ctimer?|ctrlenter|date|day|daylight|dbuh|dbuw|dccignore|dccport|ddename|debug|devent|dlevel|dname|ebeeps|emailaddr|error|event|feof|ferr|filename|filtered|find(?:dirn|filen)|full(?:address|date|name|screen)|getdir|gmt|halted|highlight|hnick|host|hotline|hotlinepos|ial|idle|ignore|inmidi|inpaste|insong|inwave|ip|isid|key(?:char|rpt|val)|knick|lactive(?:cid|wid)?|leftwin(?:cid|wid)?|locked|log(?:dir|stamp|stampfmt)?|ltimer|maddress|matchkey|me|menu(?:bar|context|type)?|mididir|mirc(?:dir|exe|ini)|mnick|mode(?:first|last|spl)|mouse|network|newnick|nick|numeric|online|opnick|os|passivedcc|pi|pnick|port|portable|prefix|prop|protect|rawbytes|rawmsg|readn|remote|result|script(?:dir|line)?|server(?:ip|target)?|show|signal|site|snicks|snotify|sock(?:br|err|name)|sreq|ssl(?:dll|libdll|ready|version)?|status|stripped|switchbar|target|ticks|time|timestamp|timestampfmt|timezone|tips|titlebar|toolbar|treebar|ulevel|url|usermode|vcmd(?:stat|ver)|version|wid|wildsite|window|vnick)\\b",
                    "captures": {
                        "1": {"name": "meta.punctuation.definition.identifier.mrc"},
                        "2": {"name": "meta.keyword.operator.identifier.default.mrc"}
                    }
                },
                {
                    "comment": "custom identifiers",
                    "begin": "((\\$)(!)?\\w+)(\\()",
                    "beginCaptures": {
                        "1": {"name": "entity.name.function.identifier.custom.mrc"},
                        "2": {"name": "meta.punctuation.definition.identifier.mrc"},
                        "3": {"name": "meta.keyword.operator.identifier.default.mrc"},
                        "4": {"name": "punctuation.bracket.round.begin.mrc"}
                    },
                    "end": "(\\))((\\.)\\w+)?",
                    "endCaptures": {
                        "1": {"name": "punctuation.bracket.round.end.mrc"},
                        "2": {"name": "entity.name.function.identifier.custom.property.mrc"},
                        "3": {"name": "meta.punctuation.definition.identifier.property.mrc"}
                    },
                    "patterns": [
                        {"include": "#identifiers-content"},
                        {"include": "#identifiers-recurse"}
                    ]
                },
                {
                    "comment": "custom identifiers (no args)",
                    "name": "entity.name.function.identifier.custom.noargs.mrc",
                    "match": "(\\$)(!)?\\w+",
                    "captures": {
                        "1": {"name": "meta.punctuation.definition.identifier.mrc"},
                        "2": {"name": "meta.keyword.operator.identifier.default.mrc"}
                    }
                }
            ]
        },
        "identifiers-recurse": {
            "patterns": [
                {
                    "begin": "(\\()",
                    "beginCaptures": {
                        "1": {"name": "punctuation.bracket.round.begin.mrc"}
                    },
                    "end": "(\\))",
                    "endCaptures": {
                        "1": {"name": "punctuation.bracket.round.end.mrc"}
                    },
                    "patterns": [
                        {"include": "#identifiers-content"},
                        {"include": "#identifiers-recurse"}
                    ]
                }
            ]
        },
        "identifiers-content": {
            "patterns": [
                {"include": "#identifiers"},
                {"include": "#variables"},
                {"include": "#constants"},
                {
                    "name": "punctuation.separator.delimiter.mrc",
                    "match": ","
                }
            ]
        },
        "identifiers-iif-recurse": {
            "patterns": [
                {
                    "begin": "(\\()",
                    "beginCaptures": {
                        "1": {"name": "punctuation.bracket.round.begin.mrc"}
                    },
                    "end": "(\\))",
                    "endCaptures": {
                        "1": {"name": "punctuation.bracket.round.end.mrc"}
                    },
                    "patterns": [
                        {"include": "#identifiers-iif-content"},
                        {"include": "#identifiers-iif-recurse"}
                    ]
                }
            ]
        },
        "identifiers-iif-content": {
            "patterns": [
                {"include": "#comparison-operators"},
                {"include": "#identifiers-content"},
                {"include": "#identifiers-iif-recurse"}
            ]
        },
        "identifiers-calc-recurse": {
            "patterns": [
                {
                    "begin": "(\\()",
                    "beginCaptures": {
                        "1": {"name": "punctuation.bracket.round.begin.mrc"}
                    },
                    "end": "(\\))",
                    "endCaptures": {
                        "1": {"name": "punctuation.bracket.round.end.mrc"}
                    },
                    "patterns": [
                        {"include": "#identifiers-calc-content"},
                        {"include": "#identifiers-calc-recurse"}
                    ]
                }
            ]
        },
        "identifiers-calc-content": {
            "patterns": [
                {"include": "#identifiers-content"},
                {"include": "#arithmetic-operators"},
                {"include": "#identifiers-calc-recurse"}
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.other.normal.mrc",
                    "match": "(%)\\w+",
                    "captures": {
                        "1": {"name": "meta.punctuation.definition.variable.other.normal.mrc"}
                    }
                },
                {
                    "name": "variable.other.binary.mrc",
                    "match": "(&)\\w+",
                    "captures": {
                        "1": {"name": "meta.punctuation.definition.variable.other.binary.mrc"}
                    }
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.numeric.mrc",
                    "match": "(?:^|(?<=\\W))(?:-)?\\d+(?:\\.\\d+)?\\b"
                },
                {
                    "name": "meta.constant.other.channel.mrc",
                    "match": "(?<=[\\s\\[(,:=])#\\w*"
                },
                {
                    "name": "meta.constant.other.window.mrc",
                    "match": "(?<=[\\s\\[(,:=])@\\w+"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.mrc",
                    "match": "(\").*?(\")",
                    "captures": {
                        "1": {"name": "punctuation.definition.string.begin.mrc"},
                        "2": {"name": "punctuation.definition.string.end.mrc"}
                    }
                }
            ]
        },
        "labels": {
            "patterns": [
                {
                    "name": "entity.name.section.label.mrc",
                    "match": "(?:^|(?<=[|{)]|else)\\s)\\s*:\\w+"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.separator.command.mrc",
                    "match": "(?<=\\s)\\|(?=\\s)"
                },
                {
                    "name": "punctuation.bracket.square.begin.mrc",
                    "match": "(?:^|(?<=\\s))\\[(?=\\s)"
                },
                {
                    "name": "punctuation.bracket.square.end.mrc",
                    "match": "(?<=\\s)\\](?:(?=\\s)|$)"
                },
                {
                    "name": "meta.block.mrc",
                    "begin": "(?<=\\s)({)(?:(?=\\s)|$)",
                    "beginCaptures": {
                        "1": {"name": "punctuation.bracket.curly.begin.mrc"}
                    },
                    "end": "(?:^|(?<=\\s))(})(?:(?=\\s)|$)",
                    "endCaptures": {
                        "1": {"name": "punctuation.bracket.curly.end.mrc"}
                    },
                    "patterns": [
                        {"include": "$self"}
                    ]
                }
            ]
        }
    }
}
